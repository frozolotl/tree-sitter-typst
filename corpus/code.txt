================================================================================
Inline code expression
================================================================================
foo #bar baz
--------------------------------------------------------------------------------

(source_file
  (markup
    (text)
    (embedded_code_expr
      (variable
        (code_ident)))
    (text)))

================================================================================
Inline code expression with newlines
================================================================================
foo
#bar
baz
--------------------------------------------------------------------------------

(source_file
  (markup
    (text)
    (embedded_code_expr
      (variable
        (code_ident)))
    (text)))

================================================================================
Inline code expression with semicolon
================================================================================
#bar;baz
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (variable
        (code_ident)))
    (text)))

================================================================================
Inline code expression with semicolon and newline
================================================================================
#bar;
baz
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (variable
        (code_ident)))
    (text)))

================================================================================
Identifier
================================================================================
#foo
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (variable
        (code_ident)))))

================================================================================
Empty content block
================================================================================
#[]
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (content_block))))

================================================================================
Content block with content
================================================================================
#[hello world]
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (content_block
        (markup
          (text))))))

================================================================================
Content block with content with heading
================================================================================
#[= heading]
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (content_block
        (markup
          (heading
            (heading_start)
            (markup
              (text))))))))

================================================================================
Empty code block
================================================================================
#{}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_block))))

================================================================================
Code block, one line
================================================================================
#{
  10
}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_block
        (code_int)))))

================================================================================
Code block, multiple lines
================================================================================
#{
  let test = "5"
  10
  test
}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_block
        (let_binding
          (pattern
            (code_ident))
          (string))
        (code_int)
        (variable
          (code_ident))))))

================================================================================
Empty array
================================================================================
#()
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array))))

================================================================================
Parenthesized
================================================================================
#(none)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_parenthesized))))

================================================================================
Parenthesized, with spaces
================================================================================
#( none )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_parenthesized))))

================================================================================
Array, one element
================================================================================
#(none,)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array))))

================================================================================
Array, multiple elements
================================================================================
#(none, none, auto)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array))))

================================================================================
Array, multiple elements, spacing everywhere, trailing comma
================================================================================
#(
  none ,
  none ,
  auto ,
)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array))))

================================================================================
Array, one spread
================================================================================
#(..foo)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array
        (spread
          (variable
            (code_ident)))))))

================================================================================
Array, multiple spreads, spacing everywhere
================================================================================
#( .. foo, .. bar )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (array
        (spread
          (variable
            (code_ident)))
        (spread
          (variable
            (code_ident)))))))

================================================================================
Empty dictionary
================================================================================
#(:)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict))))

================================================================================
Empty dictionary with extra spacing
================================================================================
#( : )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict))))

================================================================================
Empty dictionary, empty spread
================================================================================
#(: ..)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (spread)))))

================================================================================
Prefixed dictionary, spread from variable
================================================================================
#(: ..foo)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (spread
          (variable
            (code_ident)))))))

================================================================================
Prefixed dictionary, multiple spreads
================================================================================
#(: ..foo, ..bar)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (spread
          (variable
            (code_ident)))
        (spread
          (variable
            (code_ident)))))))

================================================================================
Prefixed dictionary, spread with space
================================================================================
#(: .. foo)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (spread
          (variable
            (code_ident)))))))

================================================================================
Prefixed dictionary, with values
================================================================================
#(: foo: none, "baz": none)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (named_value
          (code_ident))
        (named_value
          (string))))))

================================================================================
Prefixed dictionary, with values, trailing comma
================================================================================
#(:
  foo: none,
  "baz": none,
)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (named_value
          (code_ident))
        (named_value
          (string))))))

================================================================================
Unprefixed dictionary, with values, spaces everywhere
================================================================================
#(
  foo : none ,
  "baz" : none
)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (named_value
          (code_ident))
        (named_value
          (string))))))

================================================================================
Unprefixed dictionary, with values, spaces everywhere, trailing comma
================================================================================
#(
  foo : none ,
  "baz" : none ,
)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (dict
        (named_value
          (code_ident))
        (named_value
          (string))))))

================================================================================
Integer
================================================================================
#123
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_int))))

================================================================================
Float
================================================================================
#123.456
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Float, trailing comma
================================================================================
#123.
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Float, leading comma
================================================================================
#.123
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Float, exponent
================================================================================
#5e5
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Float, exponent with plus
================================================================================
#5E+5
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Float, exponent with minus
================================================================================
#5e-5
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Numeric
================================================================================
#3.5em
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (code_float))))

================================================================================
Label
================================================================================
#<foo>
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (label))))

================================================================================
Raw
================================================================================
#`raw`
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (raw))))

================================================================================
Let binding, just declaration
================================================================================
#let test
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))))))

================================================================================
Let binding, trailing semicolon
================================================================================
#let test;
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))))))

================================================================================
Let binding, trailing semicolon with spacing
================================================================================
#let test ;
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))))))

================================================================================
Let binding, with value set
================================================================================
#let test = 5
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))
        expr: (code_int)))))

================================================================================
Let binding, heading on next line
================================================================================
#let test
= 5
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))))
    (heading
      (heading_start)
      inner: (markup
        (text)))))

================================================================================
Let binding, after text, heading on next line
================================================================================
test
#let test
= 5
--------------------------------------------------------------------------------

(source_file
  (markup
    (text)
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (code_ident))))
    (heading
      (heading_start)
      inner: (markup
        (text)))))

================================================================================
Let binding, name parenthesized
================================================================================
#let (test) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern
          (pattern_parenthesized
            (code_ident)))))))

================================================================================
Let binding, underscore as name
================================================================================
#let _ = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern)))))

================================================================================
Let binding, empty array destructuring
================================================================================
#let () = ()
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_destructuring)
        expr: (array)))))

================================================================================
Let binding, non-empty array destructuring
================================================================================
#let (foo, bar) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_destructuring
          (code_ident)
          (code_ident))))))

================================================================================
Let binding, array destructuring, trailing comma
================================================================================
#let ( foo , ) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_destructuring
          (code_ident))))))

================================================================================
Let binding, dictionary destructuring
================================================================================
#let ( foo : bar ) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_destructuring
          (pattern_named
            field: (code_ident)
            binding: (code_ident)))))))

================================================================================
Function definition
================================================================================
#let foo() = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params))))))

================================================================================
Function definition, space in parentheses
================================================================================
#let foo( ) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params))))))

================================================================================
Function definition, one argument
================================================================================
#let foo(bar) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (code_ident)))))))

================================================================================
Function definition, one argument, spacing everywhere, trailing comma
================================================================================
#let foo( bar , ) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (code_ident)))))))

================================================================================
Function definition, multiple arguments
================================================================================
#let foo(bar, baz, quux) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (code_ident)
            (code_ident)
            (code_ident)))))))

================================================================================
Function definition, named arguments
================================================================================
#let foo(bar: (), baz : "") = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (param_named
              name: (code_ident)
              value: (array))
            (param_named
              name: (code_ident)
              value: (string))))))))

================================================================================
Function definition, spread
================================================================================
#let foo(..bar) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (pattern_spread
              (code_ident))))))))

================================================================================
Function definition, destructuring
================================================================================
#let foo((bar: baz)) = none
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (let_binding
        pattern: (pattern_closure
          name: (code_ident)
          params: (params
            (pattern_destructuring
              (pattern_named
                field: (code_ident)
                binding: (code_ident)))))))))

================================================================================
Set rule, no arguments
================================================================================
#set text()
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args)))))

================================================================================
Set rule, field access, no arguments
================================================================================
#set enum.item()
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident)
          field: (code_ident))
        arguments: (code_args)))))

================================================================================
Set rule, field access, no arguments, spacing everywhere
================================================================================
#set enum
  . item (
  )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident)
          field: (code_ident))
        arguments: (code_args)))))

================================================================================
Set rule, field access, newline after dot
================================================================================
#set enum
  .
  item (
  )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident)
          (ERROR)
          field: (MISSING code_ident))
        arguments: (code_args)))))

================================================================================
Set rule, newline pefore open parenthesis
================================================================================
#set enum
  (
  )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        (ERROR)
        arguments: (code_args)))))

================================================================================
Set rule, one argument
================================================================================
#set text(5pt)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (code_int))))))

================================================================================
Set rule, multiple arguments
================================================================================
#set foo( a , b , c , )
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (variable
            (code_ident))
          (variable
            (code_ident))
          (variable
            (code_ident)))))))

================================================================================
Set rule, named argument
================================================================================
#set text(size : 10pt)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (code_args_named
            name: (code_ident)
            value: (code_int)))))))

================================================================================
Set rule, spread
================================================================================
#set text(..)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (spread))))))

================================================================================
Set rule, spread value
================================================================================
#set text(..rest)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (spread
            (variable
              (code_ident))))))))

================================================================================
Set rule, mixed
================================================================================
#set text(5pt, font: "Inter", ..rest)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (code_int)
          (code_args_named
            name: (code_ident)
            value: (string))
          (spread
            (variable
              (code_ident))))))))

================================================================================
Set rule, b
================================================================================
#set text(5pt, font: "Inter", ..rest)
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args
          (code_int)
          (code_args_named
            name: (code_ident)
            value: (string))
          (spread
            (variable
              (code_ident))))))))

================================================================================
Set-if rule
================================================================================
#set foo() if bar
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args)
        condition: (variable
          (code_ident))))))

================================================================================
Set, next line if
================================================================================
#set foo()
if bar
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (set_rule
        target: (set_rule_field_access
          target: (code_ident))
        arguments: (code_args)))
    (text)))

================================================================================
Show, no selector
================================================================================
#show: "foo"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (show_rule
        transform: (string)))))

================================================================================
Show, no selector, spacing everywhere
================================================================================
#show : "foo"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (show_rule
        transform: (string)))))

================================================================================
Show, with selector
================================================================================
#show heading: "foo"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (show_rule
        selector: (variable
          (code_ident))
        transform: (string)))))

================================================================================
Show, with selector, spacing everywhere
================================================================================
#show heading : "foo"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (show_rule
        selector: (variable
          (code_ident))
        transform: (string)))))

================================================================================
Show, next line selector
================================================================================
#show
heading: none
--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (markup
    (text)
    (text)
    (text)))

================================================================================
Show, next line transform
================================================================================
#show heading
: none
--------------------------------------------------------------------------------

(source_file
  (ERROR
    (variable
      (code_ident)))
  (markup
    (text)
    (text)))

================================================================================
Conditional, no else, code block
================================================================================
#if true {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (code_block)))))

================================================================================
Conditional, no else, content block
================================================================================
#if true []
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (content_block)))))

================================================================================
Conditional, no else, newline after if
================================================================================
#if
true {}
--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (markup
    (text))
  (ERROR))

================================================================================
Conditional, no else, newline after expression
================================================================================
#if true
{}
--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (markup)
  (ERROR))

================================================================================
Conditional, with else
================================================================================
#if true {} else {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (code_block)
        (code_block)))))

================================================================================
Conditional, newline before else
================================================================================
#if true {}
else {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (code_block)
        (code_block)))))

================================================================================
Conditional, newline after else
================================================================================
#if true {} else
{}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (ERROR
          (code_block)
          (ERROR))
        (code_block)))))

================================================================================
Conditional, else if
================================================================================
#if true {} else if true {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (code_block)
        (conditional
          (code_block))))))

================================================================================
Conditional, multiple else if
================================================================================
#if true {} else if true {} else if true {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (conditional
        (code_block)
        (conditional
          (code_block)
          (conditional
            (code_block)))))))

================================================================================
While loop, code block
================================================================================
#while true {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (while_loop
        (code_block)))))

================================================================================
While loop, content block
================================================================================
#while true []
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (while_loop
        (content_block)))))

================================================================================
While loop, newline before condition
================================================================================
#while
true {}
--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (markup
    (text))
  (ERROR))

================================================================================
While loop, newline after condition
================================================================================
#while true
{}
--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (markup)
  (ERROR))

================================================================================
For loop
================================================================================
#for x in () {}
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (for_loop
        (pattern
          (code_ident))
        (array)
        (code_block)))))

================================================================================
For loop, newline before body
================================================================================
#for x in ()
{}
--------------------------------------------------------------------------------

(source_file
  (ERROR
    (pattern
      (code_ident))
    (array))
  (markup)
  (ERROR))

================================================================================
Import module
================================================================================
#import "test.typ"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)))))

================================================================================
Import everything from module
================================================================================
#import "test.typ": *
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)))))

================================================================================
Import nothing from module
================================================================================
#import "test.typ":
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)))))

================================================================================
Import items from module
================================================================================
#import "test.typ": foo, bar
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)
        (code_ident)
        (code_ident)))))

================================================================================
Import items from module, trailing comma
================================================================================
#import "test.typ": foo, bar,
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)
        (code_ident)
        (code_ident)))))

================================================================================
Import items from module, trailing comma, spacing everywhere
================================================================================
#import "test.typ" : foo , bar ,
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_import
        (string)
        (code_ident)
        (code_ident)))))

================================================================================
Include
================================================================================
#include "test.typ"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_include
        (string)))))

================================================================================
Include, next line expression
================================================================================
#include
"test.typ"
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (module_include
        (variable
          (MISSING code_ident))))
    (smart_quote)
    (text)
    (smart_quote)))

================================================================================
Break
================================================================================
#break
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr)))

================================================================================
Continue
================================================================================
#continue
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr)))

================================================================================
Return, no argument
================================================================================
#return
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (return_stmt))))

================================================================================
Return, with argument
================================================================================
#return foo
--------------------------------------------------------------------------------

(source_file
  (markup
    (embedded_code_expr
      (return_stmt
        (variable
          (code_ident))))))
